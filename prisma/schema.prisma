// Connection and settings
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Admin
type AdminState {
  blockReason String
  isBlocked   Boolean
  updatedAt   DateTime
}

model Admin {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  Csm       Csm[]
  createdAt DateTime   @default(now())
  email     String     @unique
  password  String
  role      String     @default("moderator")
  state     AdminState
  username  String     @default("")

  @@map("admins")
}

// Client
type Message {
  content String
  role    String
}

type Messages {
  createdAt DateTime
  feedback  String
  messageId Int
  messages  Message[]
  updatedAt DateTime
}

type Images {
  createdAt     DateTime
  feedback      String
  messageId     Int
  prompt        String
  revisedPrompt String?
  updatedAt     DateTime
  urls          String[]
}

type ClientAccountLevel {
  expiresAt DateTime
  gptModels String[]
  gptTokens Int
  images    Int
  name      String
  symbol    String
}

type ClientMetadata {
  firstname    String
  languageCode String
  lastname     String?
  username     String?
}

type ClientState {
  blockReason String
  isApproved  Boolean
  isBlocked   Boolean
  updatedAt   DateTime
}

model ClientImages {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String   @unique @db.ObjectId
  images     Images[]
  telegramId Int      @unique

  @@map("clientimages")
}

model ClientMessages {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  client     Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String     @unique @db.ObjectId
  messages   Messages[]
  telegramId Int        @unique

  @@map("clientmessages")
}

model Client {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  accountLevel ClientAccountLevel
  createdAt    DateTime           @default(now())
  images       ClientImages?
  messages     ClientMessages?
  metadata     ClientMetadata
  state        ClientState
  telegramId   Int                @unique

  @@map("clients")
}

// GPT
model GptModel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  associated  String[]
  creator     String
  description String
  max         Int?
  model       String   @unique
  title       String
  type        String   @default("text")

  @@map("gptmodels")
}

// CSM (Cleint Service Managment)
model Csm {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  assignedId   String?  @unique @db.ObjectId
  assigned     Admin?   @relation(fields: [assignedId], references: [id])
  createAt     DateTime @default(now())
  description  String   @default("")
  status       String   @default("new")
  telegramId   Int
  ticketNumber String   @unique
  topic        CsmTopic @relation(fields: [topicId], references: [id])
  topicId      String   @unique @db.ObjectId
  updatedAt    DateTime @default(now())

  @@map("csm")
}

model CsmTopic {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  Csm       Csm[]
  isPrivate Boolean @default(false)
  key       String  @unique
  name      Json

  @@map("csmtopics")
}
